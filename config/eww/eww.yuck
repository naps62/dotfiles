;; Variables
(defpoll clock_time :interval "5m" "date +\%I:%M")
(defpoll clock_date :interval "10h" "date '+%d/%m'")
(defvar volume_percent 0)
;; (defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
;; (defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
;; (defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defvar battery "")
(defvar battery_status "")
;; (defpoll battery :interval "15s" "./scripts/battery --bat")
;; (defpoll battery_status :interval "1m" "./scripts/battery --bat-st")
(defpoll memory :interval "5s" "scripts/memory")
(defpoll cpu :interval "5s" "scripts/cpu")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar bar_hover false)
(defvar wifi_rev false)
(defvar time_rev false)
(deflisten workspace "scripts/workspace")

(defvar eww "/usr/bin/eww -c $HOME/.config/eww")


(defpoll COL_WLAN :interval "1m" "~/.config/eww/scripts/wifi col")
(defpoll WLAN_NAME :interval "1m" "~/.config/eww/scripts/wifi name")
(defpoll WLAN_ICON :interval "1m" "~/.config/eww/scripts/wifi icon")


(defpoll song :interval "2s"  "~/.config/eww/scripts/music_info --song")
(defpoll song_artist :interval "2s"  "~/.config/eww/scripts/music_info --artist")
(defpoll current_status :interval "1s"  "~/.config/eww/scripts/music_info --time")
(defpoll song_status :interval "2s"  "~/.config/eww/scripts/music_info --status")
(defpoll cover_art :interval "2s"  "~/.config/eww/scripts/music_info --cover")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;;
;; widgets
;;

(defwidget widget_wifi [] 
(eventbox :onhover "${eww} update wifi_rev=true"
    :onhoverlost "${eww} update wifi_rev=false"
    (box :class "revealer" :vexpand "false" :hexpand "false" :space-evenly "false"
      (button :class "wifi revealer-icon" :onclick "/home/naps62/.config/rofi/network-manager/run.sh" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" "")
      (revealer :transition "slideright"
        :reveal wifi_rev
        :duration "350ms"
        (label    :class "revealer-label wifi-label"
          :text "${WLAN_NAME}TODO"
          :orientation "h"
  )))))


(defwidget widget_workspaces []
  (literal :content workspace))

;; (defwidget widget_battery []
;;   (box :class "system_module" :vexpand "false" :hexpand "false" 
;;   (circular-progress :value battery
;;       :class "circle battery"
;;       :thickness 4
;;     (button 
;;         :class "icon"
;;         :limit-width 2
;;         :tooltip "battery on ${battery}%"
;;         :onclick "$HOME/.config/eww/scripts/pop system"
;;         :wrap false
;;         ""))))

(defwidget widget_ram []
  (box :class "system_module" :vexpand "false" :hexpand "false" 
  (circular-progress :value memory
      :class "circle memory"
      :thickness 4
    (button 
        :class "icon"
        :limit-width 2
        :tooltip "using ${memory}% ram"
        :onclick "$HOME/.config/eww/scripts/pop system"
        :wrap false
        ""))))

(defwidget widget_cpu []
  (box :class "system_module" :vexpand "false" :hexpand "false" 
  (circular-progress :value cpu
      :class "circle cpu"
      :thickness 4
    (button 
        :class "icon"
        :limit-width 2
        :tooltip "using ${memory}% CPU"
        :onclick "$HOME/.config/eww/scripts/pop system"
        ""))))

(defwidget widget_divider []
    (label :class "divider" :text "|"))

(defwidget widget_space []
    (box :class "space" :text " "))

(defwidget widget_clock []
(eventbox :onhover "${eww} update time_rev=true"
    :onhoverlost "${eww} update time_rev=false"
  (box :class "module" :space-evenly "false" :orientation "h" :spacing "3" 
    (label :text clock_time :class "clock_time" )
    (button :class "clock_date"
        :onclick "$HOME/.config/eww/scripts/pop calendar" clock_date
      ))))
  
(defwidget widget_volume []
(eventbox :onhover "${eww} update vol_reveal=true"
    :onhoverlost "${eww} update vol_reveal=false"
  (box :class "revealer" :space-evenly "false" :orientation "h" :spacing "3" 
      (button   :onclick "scripts/pop audio"   :class "revealer-icon" "")
      (revealer :transition "slideleft"
        :reveal vol_reveal
        :duration "350ms"
        (scale    :class "revealer-label slider volume"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
          :onchange "amixer -D pulse sset Master {}%" )))))

;; (defwidget widget_bright []
;; (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
;;   (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
;;     (label :text "" :class "bright_icon" :tooltip "brightness")
;;       (revealer :transition "slideleft"
;;         :reveal br_reveal
;;         :duration "350ms"
;;         (scale    :class "slider brightness"
;;           :value brightness_percent
;;           :orientation "h"
;;           :tooltip "${brightness_percent}%"
;;           :max 100
;;           :min 0
;;           :onchange "brightnessctl set {}%" )))))

	;;  Music 
(defwidget widget_music [] 
(eventbox :onhover "${eww} update music_reveal=true"
    :onhoverlost "${eww} update music_reveal=false"
    (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
      (box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
      (button :class "song" :wrap "true" :onclick "~/.config/eww/scripts/pop music" song)
      (revealer :transition "slideright"
        :reveal music_reveal
        :duration "350ms"
      (box :vexpand "false" :hexpand "false" :orientation "h" 
        (button :class "song_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
          (button :class "song_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
          (button :class "song_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))))))

;;
;; bar layout
;;
(defwidget left []
  (box :orientation "h" 
    :space-evenly false  
    :halign "start"
    :class "right_modules"
  (widget_space)
  (widget_workspaces)))

(defwidget center []
  (box :orientation "h" 
    :space-evenly false  
    :halign "center"
    :class "center_modules"
  (widget_music)))

(defwidget right []
  (box :orientation "h" 
    :space-evenly false  
    :halign "end"
    :class "left_modules"
  ;; (widget_bright)
  (widget_volume)
  (widget_wifi)
  (widget_divider)
  ;; (widget_battery)
  (widget_ram)
  (widget_cpu)
  (widget_divider)
  (widget_clock)
  (widget_space)))

(defwidget bar_inner []
(eventbox
    :onhover "${eww} update bar_hover=true"
    :onhoverlost "${eww} update bar_hover=false"
  (box
      :class "${bar_hover ? 'bar hover' : 'bar not-hover'}"
      :orientation "h"
    (left)
    (center)
    (right))))

;;
;; main window
;;
(defwindow bar
  :geometry (
    geometry 
    :x "0%"
    :y "0px"
    :width "50%"
    :height "20px"
    :anchor "top center")
  :stacking "fg"
  :exclusive true
  :monitor 0
  :wm-ignore false
(bar_inner))


(defwidget system []
  (box :class "window sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  ;; (box :class "battery sys_bat_box" :orientation "h" :space-evenly "false"
  ;;     (circular-progress :value battery
  ;;               :class "sys_bat"
  ;;               :thickness 9
  ;;           (label :text ""
  ;;               :class "sys_icon_bat"
  ;;               :limit-width 2
  ;;               :wrap false))
  ;;           (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
  ;;           (label :text "battery"
  ;;               :halign "start"
  ;;               :class "sys_text_bat"
  ;;               :limit-width 9
  ;;               :wrap false)
  ;;           (label :text "${battery}%"
  ;;               :halign "start"
  ;;               :class "sys_text_bat_sub"
  ;;               :limit-width 22
  ;;               :wrap false)
  ;;           (label :text "${battery_status}"
  ;;               :halign "start"
  ;;               :class "sys_text_bat_sub"
  ;;               :limit-width 22
  ;;               :wrap false)))
            ;; (label :text "" :class "sys_sep" :halign "center")
  (box :class "memory sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :wrap false)
            (label :text "${memory_used_mb} | ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)))))

;;
;; calendar popup
;;

(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal" 
        :day calendar_day 
        :year calendar_year))))

(defwindow window_calendar
  :geometry (geometry :x "1200px" :y "5" :anchor "top right" :width "270px" :height "60px")
  :stacking "fg"
  :exclusive true
  :monitor 0
  :wm-ignore false
(cal))


;;
;; audio popup
;;
;; (defwidget audio []
;;   (box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
;;     (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
;;       (box :class "speaker_icon" :orientation "v")
;;       (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
;;       (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
;;         (box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
;;           (scale    :value volume_percent
;;             :space-evenly "false"
;;             :orientation "h"
;;             :onchange "amixer -D pulse sset Master {}%" 
;;             :tooltip "volume on ${volume_percent}%"
;;             :max 100
;;             :min 0))))
;;   (label :text "" :class "audio_sep" :halign "center")
;;     (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
;;       (box :class "mic_icon" :orientation "v")
;;       (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
;;       (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
;;         (box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
;;           (scale    :value mic_percent
;;             :space-evenly "false"
;;             :orientation "h"
;;             :tooltip "mic on ${mic_percent}%"
;;             :onchange "amixer -D pulse sset Capture {}%" 
;;             :max 100
;;             :min 0))))))

(defwindow window_audio
  :geometry (geometry :x "-20px" :y "7%" :anchor "top right" :width "280px" :height "60px")
  :stacking "fg"
  :exclusive true
  :monitor 0
  :wm-ignore false
(audio))


;;
;; system popup
;;
(defwindow window_system
  :geometry (geometry :x "1300px" :y "5" :anchor "top right" :width "300px" :height "100px")
  :stacking "fg"
  :exclusive true
  :monitor 0
  :wm-ignore false
(system))


;;
;;  Music popup
;;
(defwidget music_pop []
  (box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
    (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :halign "center" :class "music" :wrap "true" :limit-width 13 :text song)
      (label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text song_artist)
      (box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
        (button :class "music_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
        (button :class "music_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
        (button :class "music_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
        (scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value current_status)))))

(defwindow window_music
  :geometry (geometry :x "0" :y "7%" :width 428 :height 104 :anchor "top center")
  :stacking "fg"
  :exclusive true
  :monitor 0
  :wm-ignore false
  (music_pop))

