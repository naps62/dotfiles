global !p
from snippet_helpers_elixir import *
endglobal


snippet mod "module definition"
defmodule `!p ex_module_name(path, snip)` do
	$1
end
endsnippet

snippet task "task module"
defmodule Mix.Tasks.`!p ex_module_name(path, snip)` do
	use Mix.Task

	@shortdoc "$1"

	def run(_args) do
		$2
	end
end
endsnippet

snippet ectomodel "Ecto model" do
defmodule `!p ex_module_name(path, snip)` do
	use `!p ex_project_name(snip)`.Web, :model

	schema "$1" do
		$2
	end

	$0
end
endsnippet

snippet modelcase "model test case"
defmodule `!p ex_module_name(path, snip)`Test do
	use `!p ex_project_name(snip)`.ModelCase

	alias `!p ex_module_name(path, snip)`

	import `!p ex_project_name(snip)`.Factory

	$0
end
endsnippet

snippet conncase "conn test case"
defmodule `!p ex_module_name(path, snip)`Test do
	use `!p ex_project_name(snip)`.ConnCase

	alias `!p ex_module_name(path, snip)`

	import `!p ex_project_name(snip)`.Factory

	$0
end
endsnippet

snippet test "test" do
test "$1" do
	$0
end
endsnippet

snippet conntest "conn test" do
test "$1", %{conn: conn} do
	$0
end
endsnippet

snippet def "method" do
def ${1:name}($2) do
	$0
end
endsnippet

snippet defi "inline method" do
def $1($2), do: $0
endsnippet
